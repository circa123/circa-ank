ANK SPECIFICATION v0
The ANK specification are a collection of guidelines / suggestions for creating a toolkit for any OS.
ANK, inside of src/headers as well as src/ank, is meant to be a reference implementation, as well as the recommended implementation.
Circa, is a collection of utilities, including our shell, and some of the UNIX and GNU Coreutils commands re-implemented.

HEADERS

defaults.h                  - defaults for the ANK compatible system. Admin UID, what PTR is spawned, etc.
MUST:
char cfs[256]               - holds root of cfs, where init, binaries are stored, etc.
char cfs_bin[256]           - holds binaries directory, where binaries are stored
int  ADMIN_ID               - normally 0
char SUOM                   - 's' or 'm', single or multi user system
RECOMMENDED, BUT OPTIONAL:
char ADMIN_UN[]             - contains username of admin, typically circa or ank

main.h
MUST:
const char* VERSION         - version of ANK / Circa system
char        INPUT[1024]     - input specified by user, ONLY NEEDED FOR SHELL EQUIPPED SYSTEMS
char        CWD[1024]       - contains current working directory
int         ERROR           - contains return value of last shell command, ONLY NEEDED FOR SHELL EQUIPPED SYSTEMS
int         RUNNING         - 1 if shell is active, 0 if stopping

shell.h
NOTE:
SHELL.H IS ONLY NECESSARY IF SYSTEM IS INTERACTIVE, IF NOT, THIS IS UNNECESSARY, BUT RECOMMENDED.
MUST:
char *token                 - string split token for command input
char args[64][64]           - array of arrays for holding command line arguments given to programs
int  shell(char input[1024] - takes command line input, and executes it

syscall.h
MUST:
int   UNLINK_FILES(const char *F_PATH, const struct stat *STAT_STRUCT, int TYPE, struct FTW *FTW_STRUCT) - unlinks files
int   REMOVE_DIR(char *PATH) - removes directory
int   STRING_EQUAL_TO_STRING(char INPUT[], char COMPARE_STRING, int LEN) - returns 1 is strings are equal up to LEN, 0 if not
char* INT_TO_FORMATTED_STRING(long long integer) - takes integer and turns it into formatted amount of bytes
int   SPAWN_PTR_WITH_UID_IF_PRIVILEGED(int (*ptr)(uid), uid) - if uid == ADMIN_ID, run *ptr

C PROGRAMS
NOTES:
the programs are less focused on the technical aspects, and more focused on general aspects, such as the theory behind it, or the boot sequence, rather than discussing exact source(s) to achieve the desired result. maybe gen2?

init.c
MUST:
be able to print a startup message
execute shell
RECOMMENDED, BUT OPTIONAL:
check if shell binary exists before executing and if not, print error such as "error: shell binary not found. please check for the shell binary, or contact your system administrator immediately."

main.c
MUST:
set cfs and cfs_bin for PROGRAMS
set SUOM env VARIABLES
set ADMIN_ID
set VERSION
spawn shell

syscall.c
NOTE:
SEE syscall.h IN HEADERS SECTION FOR MORE DETAIL
MUST:
UNLINK_FILES
REMOVE_DIR
STRING_EQUAL_TO_STRING
INT_TO_FORMATTED_STRING
SPAWN_PTR_WITH_UID_IF_PRIVILEGED
UNAME
